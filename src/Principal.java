
import br.udesc.udescdb.SQLiteBaseListener;
import br.udesc.udescdb.SQLiteLexer;
import br.udesc.udescdb.SQLiteParser;
import org.antlr.v4.runtime.CharStreams;
import org.antlr.v4.runtime.CodePointCharStream;
import org.antlr.v4.runtime.CommonTokenStream;
import org.antlr.v4.runtime.tree.ParseTree;
import org.antlr.v4.runtime.tree.ParseTreeWalker;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author dailo
 */
public class Principal extends javax.swing.JFrame {

    /**
     * Creates new form Principal
     */
    public Principal() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        CampoSQL = new javax.swing.JTextField();
        CampoConsole = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        BotaoExecutar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Informe comando SQL:");

        jLabel2.setText("Console:");

        BotaoExecutar.setText("Executar");
        BotaoExecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotaoExecutarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(BotaoExecutar)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(CampoConsole, javax.swing.GroupLayout.DEFAULT_SIZE, 757, Short.MAX_VALUE)
                            .addComponent(CampoSQL)
                            .addComponent(jLabel1))))
                .addContainerGap(42, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(CampoSQL, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BotaoExecutar)
                .addGap(9, 9, 9)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(CampoConsole, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(34, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BotaoExecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotaoExecutarActionPerformed
        CampoConsole.setText("Criado com sucesso!");
        
        String create = "create table xpto (col1 int, col2 char(20), col3 float)";

        String insert = "insert into xpto (col1, col2) values (1, 'abc')";

        String select = "select * from xpto";

        CodePointCharStream inputStream = CharStreams.fromString(create);
        SQLiteLexer lexer               = new SQLiteLexer(inputStream);
        CommonTokenStream cts           = new CommonTokenStream(lexer);
        SQLiteParser parser             = new SQLiteParser(cts);

        parser.setBuildParseTree(true);
        ParseTree tree = parser.parse();

        ParseTreeWalker p = new ParseTreeWalker();
        //CampoConsole.setText(p.walk(new SQLiteBaseListener(), tree));

		// agora vamos pegar as informacoes que o listener capturou e processar o comando 
                
                
                
                /**
                 * usar alguma coisa assim tamb√©m 
                 * 
                 * 		
		// Carregando o driver
		Class.forName("org.postgresql.Driver");

		// Conectar a Base de Dados
		Connection con = DriverManager.getConnection("jdbc:postgresql://localhost:5432/voos", "aluno", "aluno");
		
		// Executando consultas
		Statement st = con.createStatement();
		ResultSet rs = st.executeQuery("select cd_aeroporto, ds_nome, ds_cidade, ds_pais from aeroportos order by ds_nome");
		
		while (rs.next()) {
			
			System.out.printf("%s, %s, %s, %s \n", rs.getInt(1), rs.getString(2), rs.getString(3), rs.getString(4));
		}
		
		// Executando alteracoes: insert, update e delete
		int res = st.executeUpdate("insert into aeroportos (cd_aeroporto, ds_nome, ds_cidade, ds_pais) values (500, 'Teste', 'City', 'Country')");
		System.out.printf("%s", res);
		
		con.close();
                 */
    }//GEN-LAST:event_BotaoExecutarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BotaoExecutar;
    private javax.swing.JTextField CampoConsole;
    private javax.swing.JTextField CampoSQL;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables
}
